________________________________________________________________________________________________________________________________________________________________________

C# List<T> Sınıfına Giriş

*ArrayList, nesnelerin herhangi bir türünü depolayabilen bir koleksiyondur 
(Object türünü depolar). Bu nedenle, öğeler eklenirken boxing/unboxing işlemleri gerekir.
Bu işlemler performansı olumsuz etkiler.

*List<int> ise sadece int türünden öğeleri kabul eden bir koleksiyondur
ve boxing/unboxing işlemlerine gerek kalmaz.

________________________________________________________________________________________________________________________________________________________________________

Önemli Noktalar:

Tip Güvenliği: List<T> sınıfı, tür güvenliğini sağlar, yani yalnızca aynı türdeki öğeleri depolar.
Dinamik Boyut: Liste boyutu dinamiktir ve çalışma zamanında değişebilir.
Erişilebilirlik: Liste öğelerine dizinleme yoluyla doğrudan erişilebilir.
Esneklik: List<T> sınıfı, öğeler eklemek, kaldırmak, sıralamak vb. işlemler için birçok metod sunar.

Kullanım Amaçları ve Senaryoları:
Veri Depolama: Çeşitli türdeki verileri düzenli bir şekilde depolamak.
Arama İşlemleri: Listede belirli öğeleri hızlı bir şekilde bulmak.
Sıralama: Verileri belirli bir kriter veya düzene göre sıralamak.
Veri Manipülasyonu: Veriler üzerinde ekleme, silme, güncelleme gibi işlemler yapmak.
________________________________________________________________________________________________________________________________________________________________________

List<int> numbers = new List<int>();

// Özet: Bu kod, int türünden yeni bir liste oluşturur.


________________________________________________________________________________________________________________________________________________________________________

numbers.Add(1);
numbers.Add(2);
numbers.Add(3);

// Özet: Bu kod, listeye üç adet sayı ekler.

________________________________________________________________________________________________________________________________________________________________________

foreach (var number in numbers)
{
    Console.WriteLine(number);
}

// Özet: Bu kod, listeyi döngü ile gezip, elemanları konsola yazar.

________________________________________________________________________________________________________________________________________________________________________

List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };

// Özet: Bu kod, beş elemanı olan bir listeyi başlatır.

________________________________________________________________________________________________________________________________________________________________________

if (numbers.Contains(3))
{
    Console.WriteLine("List contains the number 3.");
}

// Özet: Bu kod, listenin '3' sayısını içerip içermediğini kontrol eder.

________________________________________________________________________________________________________________________________________________________________________

int element = numbers[2]; // indexler 0'dan başlar, bu yüzden bu 3. öğeyi alır.

// Özet: Bu kod, listedeki üçüncü öğeyi alır.

________________________________________________________________________________________________________________________________________________________________________

numbers.Insert(2, 99); // 3. pozisyona '99' ekler.

// Özet: Bu kod, listenin belirli bir pozisyonuna yeni bir eleman ekler.

________________________________________________________________________________________________________________________________________________________________________

numbers.Sort(); // varsayılan olarak artan sırada sıralar

// Özet: Bu kod, listeyi artan sırada sıralar.

________________________________________________________________________________________________________________________________________________________________________

numbers.Remove(3); // İlk '3' değerini bulur ve kaldırır.

// Özet: Bu kod, listeden belirli bir öğeyi kaldırır.

________________________________________________________________________________________________________________________________________________________________________

int count = numbers.Count; // liste uzunluğunu alır
numbers.Clear(); // tüm listeyi temizler

// Özet: Bu kod, listeyi temizler ve önceki uzunluğu alır.

________________________________________________________________________________________________________________________________________________________________________

Üniversite Sınıfı ve Öğrenci Yönetimi

using System;
using System.Collections.Generic;

// Öğrenci sınıfı
public class Student
{
    public string Name { get; set; }
    public int Age { get; set; }

    public Student(string name, int age)
    {
        Name = name;
        Age = age;
    }

    public void DisplayInfo()
    {
        Console.WriteLine($"Name: {Name}, Age: {Age}");
    }
}

// Üniversite sınıfını temsil eden sınıf
public class UniversityClass
{
    private readonly List<Student> students; // Öğrenci listesi

    public UniversityClass()
    {
        students = new List<Student>(); // Öğrenci listesini başlatma
    }

    // Öğrenci ekleme metodu
    public void AddStudent(Student student)
    {
        students.Add(student);
        Console.WriteLine($"{student.Name} has been added to the class.");
    }

    // Tüm öğrencilerin bilgilerini gösterme
    public void DisplayStudents()
    {
        Console.WriteLine("Students in the class:");
        foreach (var student in students)
        {
            student.DisplayInfo();
        }
    }
}

class Program
{
    static void Main()
    {
        UniversityClass myClass = new UniversityClass();

        // Öğrencileri oluşturma ve sınıfa ekleme
        Student student1 = new Student("John Doe", 20);
        Student student2 = new Student("Jane Smith", 22);
        
        myClass.AddStudent(student1);
        myClass.AddStudent(student2);

        // Sınıftaki tüm öğrencileri listeleme
        myClass.DisplayStudents();
    }
}

________________________________________________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________________________________________________