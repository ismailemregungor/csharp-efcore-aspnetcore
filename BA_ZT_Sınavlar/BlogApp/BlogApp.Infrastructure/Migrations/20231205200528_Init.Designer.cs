// <auto-generated />
using System;
using BlogApp.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace BlogApp.Infrastructure.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20231205200528_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogApp.Domain.Entites.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0e765f44-e69b-4588-ba19-b9e0a667b7d6",
                            ConcurrencyStamp = "ab36994c-863f-4bc7-87d2-d3148f4bc28e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e64f5d2b-64b8-45f8-9f68-1150a68b97f7",
                            ConcurrencyStamp = "66c5a9d1-ae4a-47c4-9de5-80cdfeb4b49b",
                            Name = "Uye",
                            NormalizedName = "UYE"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("EklemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("NUMBER(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b79b4f50-e3b6-40a5-9b08-6f608b4f30d0",
                            AccessFailedCount = 0,
                            Ad = "Deneme1",
                            ConcurrencyStamp = "365c32cf-5ba8-4247-b3cd-f3aec80a11f1",
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(5112),
                            Email = "deneme1@gmail.com",
                            EmailConfirmed = false,
                            KayitDurumu = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "DENEME1@GMAIL.COM",
                            NormalizedUserName = "DENEME1",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/LMpzePs2NERYt8DOBGth7T7vlR8AkM5oI2XOXaunHg9pPyCS/8YUulNJrr69PNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18362584-2a47-4795-8f0a-ca7c8b8ac06d",
                            Soyad = "Deneme1",
                            TwoFactorEnabled = false,
                            UserName = "deneme1"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.Konu", b =>
                {
                    b.Property<int>("KonuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KonuID"), 6L, 1);

                    b.Property<DateTime>("EklemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("KonuAdi")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("KonuID");

                    b.ToTable("KONULAR", (string)null);

                    b.HasData(
                        new
                        {
                            KonuID = 1,
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(4830),
                            KayitDurumu = 1,
                            KonuAdi = "Ekonomi"
                        },
                        new
                        {
                            KonuID = 2,
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(4832),
                            KayitDurumu = 1,
                            KonuAdi = "Bilim"
                        },
                        new
                        {
                            KonuID = 3,
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(4833),
                            KayitDurumu = 1,
                            KonuAdi = "Teknoloji"
                        },
                        new
                        {
                            KonuID = 4,
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(4834),
                            KayitDurumu = 1,
                            KonuAdi = "Sağlık"
                        },
                        new
                        {
                            KonuID = 5,
                            EklemeTarihi = new DateTime(2023, 12, 5, 23, 5, 28, 801, DateTimeKind.Local).AddTicks(4835),
                            KayitDurumu = 1,
                            KonuAdi = "Tarih"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.Makale", b =>
                {
                    b.Property<int>("MakaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MakaleID"), 1L, 1);

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Detay")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("EklemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("KonuID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("MakaleID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("KonuID");

                    b.ToTable("MAKALELER", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b79b4f50-e3b6-40a5-9b08-6f608b4f30d0",
                            RoleId = "0e765f44-e69b-4588-ba19-b9e0a667b7d6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.Makale", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppUser", "AppUser")
                        .WithMany("Makaleler")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entites.Konu", "Konu")
                        .WithMany("Makaleler")
                        .HasForeignKey("KonuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Konu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogApp.Domain.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.AppUser", b =>
                {
                    b.Navigation("Makaleler");
                });

            modelBuilder.Entity("BlogApp.Domain.Entites.Konu", b =>
                {
                    b.Navigation("Makaleler");
                });
#pragma warning restore 612, 618
        }
    }
}
